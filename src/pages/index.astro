---
import Layout from '../layouts/Layout.astro';
---

<script>
	import type {TarotCard} from '../types.d.ts'
	import Card from '../components/Card.astro';
	import Papa from 'papaparse'
	
	let error = null
	let isLoading = false
	const TAROT_DATA: TarotCard[] = []
	
	function setError (message?: string) {
		if (!message) error = null
		else error = {message}
	}
	
	function toggleLoading () {
		isLoading = !isLoading
	}
	
	async function getSheetData(): Promise<string> {
		const response = await fetch(import.meta.env.PUBLIC_CSV_URL)
		return await response.text()
	}
	
		
	async function parseToData (): Promise<TarotCard[]> {
		const file = await getSheetData()
		
		// @ts-ignore
		const data = await new Promise<TarotCard[]>((res, rej)=> Papa.parse(file, {
			header: true,
			complete: (result: {data: TarotCard[]}) => res(result.data),
			error: (err: string) => rej(err)
		}))
		
		return data
	}
		
		
	toggleLoading()
	await parseToData()
		.then((data: TarotCard[]) => {
			TAROT_DATA.push(...data)
		})
		.catch((err: string) => console.error(err))
		.finally(() => toggleLoading())
	
	if (TAROT_DATA.length > 0) {
		const container = document.getElementById('container')
		
		container!.innerHTML = `
		${TAROT_DATA.map((card: TarotCard) => {
				const { title, description, information: rawInfo, subtitle, updated_at, image, type} = card;
				const information = rawInfo.split('\n');
				
				return `<article class="border-[4px] border-red-500 border-solid">
					<h2 class="text-red-500">${title}</h2>
					<p>${description}</p>
					<ul class="list-disc">${information.map((text: string) => `<li>${text}</li>`)}</ul>
					<p>${subtitle}</p>
					<p>${updated_at}</p>
					<p>${type}</p>
					<img src=${image} alt=${title} />
				</article>`
			})}
		`
		console.log(TAROT_DATA)
	}

</script>

<Layout title="Mi tarot.">
	<main id="container"></main>
</Layout>